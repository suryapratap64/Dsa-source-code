рдмрд╣реБрдд рдмрдврд╝рд┐рдпрд╛ рд╕рд╡рд╛рд▓ ЁЯСП DP (Dynamic Programming) рдХреЗ approaches рд╕рдордЭрдирд╛ рдмрд╣реБрдд рдЬрд╝рд░реВрд░реА рд╣реИред рдЪрд▓реЛ рдореИрдВ рд╕рд╛рд░реЗ types рдХреЛ hinglish + examples рдореЗрдВ explain рдХрд░рддрд╛ рд╣реВрдБ:

ЁЯФе Types of Dynamic Programming Approaches
1. Recursion (Naive Top-to-Bottom)

ЁЯСЙ рд╕рдмрд╕реЗ рдкрд╣рд▓реЗ рд╣рдо pure recursion рд▓рд┐рдЦрддреЗ рд╣реИрдВ, рдмрд┐рдирд╛ DP/memoization рдХреЗред

рд╣рдо problem рдХреЛ рддреЛрдбрд╝рддреЗ рд╣реИрдВ рдЫреЛрдЯреЗ subproblems рдореЗрдВред

рд╣рд░ рдмрд╛рд░ same subproblem рдмрд╛рд░-рдмрд╛рд░ calculate рд╣реЛрддрд╛ рд╣реИ (Overlapping Subproblems problem)ред

ЁЯУМ Example (House Robber problem):

int solve(vector<int>& nums, int n) {
    if (n == 1) return nums[0];
    if (n == 2) return max(nums[0], nums[1]);

    int include = nums[n-1] + solve(nums, n-2); // current house loot + skip previous
    int exclude = solve(nums, n-1);             // skip current house
    return max(include, exclude);
}


тЪая╕П Problem тЖТ Time Complexity рдмрд╣реБрдд high рд╣реЛ рдЬрд╛рддрд╛ рд╣реИ (Exponential O(2^n))ред

2. Top-to-Bottom with Memoization (Recursive DP)

ЁЯСЙ рдпрд╣рд╛рдБ рд╣рдо recursion рддреЛ use рдХрд░рддреЗ рд╣реИрдВ, рд▓реЗрдХрд┐рди dp array рд░рдЦрддреЗ рд╣реИрдВ рддрд╛рдХрд┐ same subproblem рдмрд╛рд░-рдмрд╛рд░ solve рдирд╛ рд╣реЛред

Memoization = Recursion + Storage (dp array / hashmap)ред

ЁЯУМ Example (House Robber with memoization):

int solve(vector<int>& nums, int n, vector<int>& dp) {
    if (n == 1) return nums[0];
    if (n == 2) return max(nums[0], nums[1]);

    if (dp[n] != -1) return dp[n]; // already solved

    int include = nums[n-1] + solve(nums, n-2, dp);
    int exclude = solve(nums, n-1, dp);

    return dp[n] = max(include, exclude);
}


ЁЯФ╣ Isse Time Complexity O(n) рд╣реЛ рдЬрд╛рддрд╛ рд╣реИ рдХреНрдпреЛрдВрдХрд┐ рд╣рд░ state рдПрдХ рдмрд╛рд░ рд╣реА solve рд╣реЛрддреА рд╣реИред

3. Bottom-to-Top with Tabulation (Iterative DP)

ЁЯСЙ рдЗрд╕рдореЗрдВ рд╣рдо recursion avoid рдХрд░рдХреЗ directly loop se chhoti problem se badi problem solve рдХрд░рддреЗ рд╣реИрдВред

Base case initialize рдХрд░рддреЗ рд╣реИрдВ рдФрд░ gradually answer рдмрдирд╛рддреЗ рд╣реИрдВред

ЁЯУМ Example (House Robber tabulation):

int rob(vector<int>& nums) {
    int n = nums.size();
    if (n == 1) return nums[0];
    if (n == 2) return max(nums[0], nums[1]);

    vector<int> dp(n);
    dp[0] = nums[0];
    dp[1] = max(nums[0], nums[1]);

    for (int i = 2; i < n; i++) {
        dp[i] = max(nums[i] + dp[i-2], dp[i-1]);
    }
    return dp[n-1];
}


ЁЯФ╣ Ye iterative approach рд╣реИ, recursion use nahi hota.
ЁЯФ╣ Time Complexity O(n), Space O(n)ред

4. Space Optimized DP

ЁЯСЙ рдХрднреА-рдХрднреА hume dp array рдХреА рдЬрд╝рд░реВрд░рдд рдирд╣реАрдВ рд╣реЛрддреА, рдХреНрдпреЛрдВрдХрд┐ рд╣рдореЗрдВ рд╕рд┐рд░реНрдл рдкрд┐рдЫрд▓реЗ 1-2 states рдХреА рдЬрд╝рд░реВрд░рдд рд╣реЛрддреА рд╣реИред

рдРрд╕реЗ рдореЗрдВ рд╣рдо рд╕рд┐рд░реНрдл 2-3 variables use рдХрд░рдХреЗ рдХрд╛рдо рдЪрд▓рд╛ рд▓реЗрддреЗ рд╣реИрдВред

ЁЯУМ Example (House Robber optimized):

int rob(vector<int>& nums) {
    int n = nums.size();
    if (n == 1) return nums[0];
    if (n == 2) return max(nums[0], nums[1]);

    int prev2 = nums[0];
    int prev1 = max(nums[0], nums[1]);

    for (int i = 2; i < n; i++) {
        int curr = max(nums[i] + prev2, prev1);
        prev2 = prev1;
        prev1 = curr;
    }
    return prev1;
}


ЁЯФ╣ Space Complexity O(1) тЖТ рдХреНрдпреЛрдВрдХрд┐ dp array рдирд╣реАрдВ рд░рдЦрд╛ред

ЁЯФС Summary (Hindi + English)
Approach	                         Kaise kaam karta hai	Time Complexity	Space Complexity
Recursion (Naive)	                      Top-to-Bottom, no dp	O(2^n)	O(n) (stack)
Top-to-Bottom + Memoization	Recursion + dp array	O(n)	O(n)
Bottom-to-Top Tabulation	Iterative, dp array	O(n)	O(n)
Space Optimized DP	Iterative, only 2-3 variables	O(n)	O(1)

ЁЯСЙ DP рд╣рдореЗрд╢рд╛ рдпрд╣реА 4 tarike se likha рдЬрд╛рддрд╛ рд╣реИред

Naive recursion (sirf samajhne ke liye)

Memoization (Top-to-Bottom)

Tabulation (Bottom-to-Top)

Space optimized (Best in most cases)

рдХреНрдпрд╛ рдЪрд╛рд╣реЛ рддреЛ рдореИрдВ ek hi problem (House Robber / Fibonacci / Knapsack) ko рдЪрд╛рд░реЛрдВ tariko se likhрдХрд░ compare рдХрд░ рджреВрдБ?